@model ClaseModelo.Instructor

@{
    ViewBag.Title = "Create";
}

<link rel="stylesheet" href="~/Content/Site.css" />
<br />
<div class="container-fluid">
    <div class="page-header">
        <div class="row">
            <div class="col-sm-6">
                <h3>Gestionar Instructor</h3>
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">Inicio</a></li>
                    <li class="breadcrumb-item">Instructor</li>
                    <li class="breadcrumb-item">General</li>
                    <li class="breadcrumb-item active">Registrar</li>
                </ol>
            </div>
            <div class="col-sm-6">

            </div>
        </div>
    </div>
</div>
<br />
@using (Html.BeginForm())
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <div class="block">
                    <div class="card-header pb-0">
                        <h5>Registrar Instructor</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col">

                                @Html.AntiForgeryToken()
                                <form>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Documento</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.DocumentoInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.DocumentoInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Nombre Completo</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.NombreCompletoInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.NombreCompletoInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Codigo Regional</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.CodRegionalInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.CodRegionalInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Regional</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.RegionalInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.RegionalInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Cod CCOS</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.CodCCOS, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.CodCCOS, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Dependencia</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.DependenciaInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.DependenciaInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Cargo</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.CargoInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.CargoInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Tipo Cargo</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.TipoCargoInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.TipoCargoInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Correo SENA</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.CorreoSENAInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.CorreoSENAInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Red de Conocimiento</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.RedInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.RedInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Area de Conocimiento</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.AreaInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.AreaInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Ruta</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.RutaInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.RutaInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Codigo de Municipio</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.CodMunicipioInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.CodMunicipioInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Fecha de Nacimiento</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.FechaNacimientoInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.FechaNacimientoInstructor, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Fecha Ingreso</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.FechaIngreso, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.FechaIngreso, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mb-3 m-form__group">
                                        <label class="form-label">Sexo</label>
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.SexoInstructor, new { htmlAttributes = new { @class = "form-control" } })

                                        </div>
                                        @Html.ValidationMessageFor(model => model.SexoInstructor, "", new { @class = "text-danger" })
                                    </div>

                                    @Html.HiddenFor(model => model.EstadoInstructor, new { Value = "True" })

                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary m-r-15" type="submit">Registrar</button>
                        <button class="btn btn-light" type="button"><a href="@Url.Action("Index","Instructors")">Cancelar</a></button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body d-flex justify-content-end">
            <form class="Form-RegisterByFiles">
                <!-- <div class="container-loading">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Cargando los archivos...</span>
                    </div>
                </div> -->
                <h4>Registrar Instructores por Excel</h4>
                <label for="inputFile-Instructor">
                    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em"
                         viewBox="0 0 24 24">
                        <path fill="none" stroke="currentColor"
                              stroke-linecap="round" stroke-linejoin="round"
                              stroke-width="2"
                              d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4m14-7l-5-5l-5 5m5-5v12" />
                    </svg>
                    <input style="display: none;" type="file" name="inputFile-Instructor"
                           id="inputFile-Instructor"
                           accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"
                           multiple>
                </label>
                <div style="display: none;" id="container-progress-bar_Instructor" class="container-progress-bar">
                    <p id="text-progressBar-files_Instructor">Leyendo archivos...</p>
                    <div class="progress" role="progressbar"
                         aria-label="Animated striped example" aria-valuenow="75"
                         aria-valuemin="0" aria-valuemax="100">
                        <div id="bar-progressBar-files_Instructor" class="progress-bar progress-bar-striped progress-bar-animated"></div>
                    </div>
                    <label id="porcentage-progressBar-files_Instructor">0%</label>
                </div>
                <p id="message-progressBar-files_Instructor">Seleciones los archivos en formato ".xlxs"</p>
                <button type="button" style="display: none;" id="buttom-progressBar-files_Instructor">Registrar</button>
            </form>
        </div>
    </div>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            const fields = [
                { selector: '#DocumentoInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#NombreCompletoInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#CodRegionalInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#RegionalInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#CodCCOS', message: 'Este campo es obligatorio.' },
                { selector: '#DependenciaInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#CargoInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#TipoCargoInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#CorreoSENAInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#RedInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#AreaInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#RutaInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#CodMunicipioInstructor', message: 'Este campo es obligatorio.' },
                { selector: '#FechaNacimientoInstructor', message: 'Seleccione una fecha de nacimiento.' },
                { selector: '#FechaIngreso', message: 'Seleccione una fecha de ingreso.' },
                { selector: '#SexoInstructor', message: 'Este campo es obligatorio.' }
            ];

            $('form').on('submit', function (e) {
                let isValid = true;

                fields.forEach(field => {
                    const input = $(field.selector);
                    if (input.val().trim() === '') {
                        isValid = false;
                        input.addClass('is-invalid');
                        input.next('.text-danger').text(field.message);
                    } else {
                        input.removeClass('is-invalid');
                        input.next('.text-danger').text('');
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    const Toast = Swal.mixin({
                        toast: true,
                        position: "top-end",
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.onmouseenter = Swal.stopTimer;
                            toast.onmouseleave = Swal.resumeTimer;
                        }
                    });
                    Toast.fire({
                        icon: "error",
                        title: "Por favor, complete todos los campos."
                    });
                }
            });
        });
    </script>
}

<script src="~/Scripts/Handlers/InstructorHandler.js"></script>
<script src="assets/js/oneui.app.min.js"></script>